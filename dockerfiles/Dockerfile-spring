# 1st stage - Cache image
# sets up the build environment and copies the build.gradle file
ARG DEPENDENCY=./code/jvm
ARG APP_HOME=/usr/app

FROM gradle:jdk17 AS CACHE_IMAGE
ARG DEPENDENCY
ARG APP_HOME
ENV GRADLE_USER_HOME=$APP_HOME/.gradle

RUN mkdir -p $APP_HOME
COPY $DEPENDENCY/build.gradle.kts $APP_HOME
WORKDIR $APP_HOME
RUN gradle --no-daemon

# 2nd stage - Builder image
# copies the source code and builds the application
FROM gradle:jdk17 AS BUILDER_IMAGE
ARG DEPENDENCY
ARG APP_HOME
ENV GRADLE_USER_HOME=$APP_HOME/.gradle
COPY --from=CACHE_IMAGE $APP_HOME/.gradle $APP_HOME/.gradle

COPY $DEPENDENCY/settings.gradle.kts $APP_HOME
COPY $DEPENDENCY/build.gradle.kts $APP_HOME
COPY $DEPENDENCY/src $APP_HOME/src

# remove the script directory from the source code
RUN rm -r $APP_HOME/src/main/kotlin/script

WORKDIR $APP_HOME

RUN gradle bootJar --no-daemon

# 3rd stage - Runtime image
# copies the built jar file and runs the application
FROM openjdk:17-jdk-slim
ENV ARTIFACT_NAME=AGUDataSystem-0.0.1-SNAPSHOT.jar
ARG DEPENDENCY
ARG APP_HOME
ARG SH_SCRIPT_PATH=/dockerfiles/scripts/setup-back-end.sh

WORKDIR $APP_HOME
COPY --from=BUILDER_IMAGE $APP_HOME/build/libs/$ARTIFACT_NAME .

# Install tzdata and set timezone
RUN apt-get update && apt-get install -y tzdata curl && \
    ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone

# Create directories for scripts and flags
RUN mkdir -p $APP_HOME/scripts $APP_HOME/flags

# Copy the script and CSV file to the scripts directory
COPY $DEPENDENCY/out/artifacts/script $APP_HOME/scripts

# Copy the run script and make it executable
COPY $SH_SCRIPT_PATH $APP_HOME/setup-back-end.sh
RUN chmod +x $APP_HOME/setup-back-end.sh

EXPOSE 8080
ENTRYPOINT ["$APP_HOME/setup-back-end.sh"]